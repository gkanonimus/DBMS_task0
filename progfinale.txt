#include <iostream>
#include <random>

using namespace std;

/**
 * \brief Get sizw if the array
 * \return Size_t size of array
 * \exception Function throws exception invalid_argument if array has invalid size
 */
size_t getsize();

/**
* \brief Print array in size_t and char types
* \param Accepts a pointer to array with pseudo-random unsigned chars
* \param Accepts size of the array
*/
void printarray(unsigned char* values, const size_t size);

/**
* \brief Calculates the arithmetic average value and prints it
* \param Accepts a pointer to array with pseudo-random unsigned chars
* \param Accepts size of the array
* \return Arithmetic mean integer type
*/
size_t algo(unsigned char* values, const size_t size);

/**
* \brief Removes array and frees memory
* \param Accepts a pointer to array with pseudo-random chars
*/
void removearray(unsigned char* values);

int main() {
    size_t tmp_size; //To catch invalid array size
    try {
        tmp_size = getsize();
    } catch (const invalid_argument& e) {
        cout << "Error: " << e.what();
        return 1;
    }

    const size_t size = tmp_size;

    unsigned char* values = new unsigned char[size];
    for (size_t i = 0; i < size; i++) {
        values[i] = rand();
    }

    size_t result = algo(values, size);
    cout << "Result in char is" << (char)result << "\nResult in integer value is " << result << endl;
    return 0;
}

size_t getsize() {
    int size;
    cout << "Input size of array: ";
    cin >> size;

    if (size <= 0) {
        throw invalid_argument("The array size must be greater than 0");
    }
    return static_cast<size_t>(size);
}

void printarray(unsigned char* values, const size_t size) {
    if (values == nullptr) throw invalid_argument("The array size must be greater than 0\n");

    cout << "\nYour array in char is:\n";
    for (size_t i = 0; i < size; i++) {
        if (i % 15 == 0 && i != 0) cout << endl;    
        cout << values[i] << " ";
    }
    cout << "\nYour array in integer value is:\n";
    for (size_t i = 0; i < size; i++) {
        if (i % 15 == 0 && i != 0) cout << endl;
        cout << (size_t)values[i] << " ";
    }
    return;
}

size_t algo(unsigned char* values, const size_t size) {
    cout << "\n\nThe algorithm has started\n";
    if (values == nullptr) throw invalid_argument("The array size must be greater than 0\n");

    size_t res = 0;
    for (size_t i = 0; i < size; i++) {
        res += values[i];
    }
    cout << "The algorithm has finished\n\n";
    return res / size;
}

void removearray(unsigned char*& values) {
    if (values == nullptr) cout << "The array already removed\n";
    else {
        delete[] values;
        values = nullptr;
    }
    return;
}